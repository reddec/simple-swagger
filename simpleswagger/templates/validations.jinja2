{{ header }}
package {{package}}


import (
    "regexp"
)

{%- macro validate(definition, varname) %}
    {%- if definition | is_ref_to_type  %}
    if err := {{ varname }}.Validate(); err != nil {
        return err
    }
    {%- endif %}
    {%- if definition.type == 'object' %}
        {%- for prop_name in (definition.required | default([])) %}
            {%- set fieldDefinition = definition.properties[prop_name]  %}
            if {{ varname }}.{{ prop_name | label }} == {{ fieldDefinition | default_value(swagger) }} {
                return &ValidationError{Reason: "field '{{ prop_name }}' missed"}
            }
            {{ validate(fieldDefinition, (varname + "." + (prop_name | label))) }}
        {%- endfor %}
    {%- elif definition.type == 'string' %}
        {%- if 'pattern' in definition %}
            {%- set patternName = (definition.pattern | patterns) %}
            if !{{ patternName }}.MatchString(string({{ varname }})) {
                return &ValidationError{Reason: "not matched to pattern " + {{ patternName }}.String() }
            }
        {%- endif %}
        {%- if 'minLength' in definition  %}
            if len({{ varname }}) < {{ definition.minLength }} {
                return &ValidationError{Reason: "too short, required at least {{ definition.minLength }}"}
            }
        {%- endif %}
        {%- if 'maxLength' in definition  %}
            if len({{ varname }}) > {{ definition.maxLength }} {
                return &ValidationError{Reason: "too long, required at most {{ definition.maxLength }}"}
            }
        {%- endif %}
    {%- elif definition.type == 'array' %}
        {%- set itemsType = (definition.items | resolve)  %}
        {%- if itemsType | is_ref_to_type %}
        for _, item := range {{ varname }} {
            {{ validate(fieldDefinition, "item") }}
        }
        {%- endif %}
    {%- endif %}
{%- endmacro %}

{%- for name, definition in swagger.definitions.items() %}
    func (rec *{{ name }}) Validate() error {
        {{ validate(definition, "(*rec)") }}
        return nil
    }
{% endfor %}

var (
{%- for pattern, name in patterns_cache.items() %}
    {{ name }} = regexp.MustCompile({{ pattern | tojson }})
{%- endfor %}
)

type ValidationError struct {
    Reason string
}

func (err *ValidationError) Error() string {
    return "validation failed: " + err.Reason
}