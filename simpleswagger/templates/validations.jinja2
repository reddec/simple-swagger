{{ header }}
package {{package}}


import (
    "regexp"
)

var (
{% for name, definition in swagger.definitions.items() %}
    {# cache regexp #}
    {%- if definition.type == 'string' %}
        {%- if 'pattern' in definition %}
            pattern{{ name }} = regexp.MustCompile({{ definition.pattern | tojson }})
        {%- endif %}
    {%- endif %}
{% endfor %}
)

{% for name, definition in swagger.definitions.items() %}
    func (rec *{{ name }}) Validate() error {
        {%- if definition.type == 'object' %}
            {%- for prop_name in (definition.required | default([])) %}
                {%- set fieldDefinition = definition.properties[prop_name]  %}
                if rec.{{ prop_name | label }} == {{ fieldDefinition | default_value(swagger) }} {
                    return &ValidationError{Reason: "field '{{ prop_name }}' missed"}
                }
                {%- if fieldDefinition | is_ref_to_type  %}
                if err := rec.{{ prop_name | label }}.Validate(); err != nil {
                    return fmt.Errorf("field '{{ prop_name }}': %w", err)
                }
                {%- endif %}
            {%- endfor %}
        {%- elif definition.type == 'string' %}
            {%- if 'pattern' in definition %}
                if !pattern{{ name }}.MatchString(string(*rec)) {
                    return &ValidationError{Reason: "not matched to pattern " + pattern{{ name }}.String() }
                }
            {%- endif %}
            {%- if 'minLength' in definition  %}
                if len(*rec) < {{ definition.minLength }} {
                    return &ValidationError{Reason: "too short, required at least {{ definition.minLength }}"}
                }
            {%- endif %}
            {%- if 'maxLength' in definition  %}
                if len(*rec) > {{ definition.maxLength }} {
                    return &ValidationError{Reason: "too long, required at most {{ definition.maxLength }}"}
                }
            {%- endif %}
        {%- endif %}
        return nil
    }
{% endfor %}

type ValidationError struct {
    Reason string
}

func (err *ValidationError) Error() string {
    return "validation failed: " + err.Reason
}