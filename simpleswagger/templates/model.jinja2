{{ header }}
package {{package}}

import (
	"context"
	"encoding/json"
	"log"
	"net/http"
	"net/url"
    {%  if has_security %}"errors"{% endif %}
	"github.com/julienschmidt/httprouter"
)

{% for name, definition in swagger.definitions.items() %}
{%- if definition.type == 'object' %}
type {{name}} struct {
    {%- for prop_name, property in definition.properties.items() %}
        {{prop_name | title}} {{property | map_type}} `json:"{{prop_name}},omitempty"`
    {%- endfor %}
}
{%- endif %}
{% endfor %}

{%  if has_security %}
var ErrUnauthorized = errors.New("unauthorized request")

type Security interface {
    {% for  name, definition in swagger.securityDefinitions.items() %}
        AuthBy{{ name | label }}(value string) ({{ credential_type }}, error)
    {% endfor %}
}

func Credentials(ctx context.Context) {{ credential_type }} {
    return ctx.Value(ctxKeyCredentials).({{ credential_type }})
}

const ctxKeyCredentials = "credentials"
{% endif %}

type API interface {
    {%- for path, methods in swagger.paths.items() %}
        {%- for method, endpoint in methods.items() %}
        // {{endpoint.description | trim }}
        {{endpoint.operationId | label}}(ctx context.Context
        {%- for param in endpoint.get('parameters', []) -%}
        , {{param.name}} {{param | map_type}}
        {%- endfor -%}
        )
            {%- if 204 in endpoint.responses %} error
            {%- else %} ({{endpoint.responses.200.schema | map_type}}, error)
            {%- endif %}
        {%- endfor %}
    {%- endfor %}
}

const Prefix = "{{swagger.basePath}}"

func Handler(api API{% if has_security %}, auth Security{% endif %}) http.Handler {
     router := httprouter.New()

     {%- for path, methods in swagger.paths.items() %}
        {%- for method, endpoint in methods.items() %}

        router.{{method | upper}}("{{path | path}}", func(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
            defer r.Body.Close()

            {% if endpoint | secured %}
                var (
                    credentials {{ credential_type }}
                    authorized bool
                )
                {% for security in endpoint.security %}
                    {%- if not loop.first %} else {% endif -%}
                    {%- set sec_name = security.keys() | first -%}
                    {%- set def = (sec_name | sec_def) -%}

                    if cred, err := auth.AuthBy{{ sec_name }}(
                    {%- if  def["in"] == 'header' -%}
                        r.Header.Get("{{ def.name }}")
                    {%- endif -%}
                    ); err == nil {
                        credentials = cred
                        authorized = true
                    }
                {% endfor %}

                if !authorized {
                    log.Println("{{endpoint.operationId}}: authorization failed")
                    jsonError(w, ErrUnauthorized, http.StatusUnauthorized)
                    return
                }
            {% endif %}

            {% for param in endpoint.get('parameters', []) -%}
            var param{{param.name | label}} {{param | map_type}} // in {{param.in}}
            {% endfor -%}

            {% for param in endpoint.get('parameters', []) -%}
                {%- if param.in == 'path' %}
                    if v, err := url.PathUnescape(ps.ByName("{{param.name}}")); err != nil{
                         log.Println("{{endpoint.operationId}}: decode {{param.name}} from path:", err)
                         jsonError(w, err, http.StatusBadRequest)
                         return
                    }  else {
                        param{{param.name | label}} = v
                    }
                {%- elif param.in == 'body' %}
                    if err := json.NewDecoder(r.Body).Decode(&param{{param.name | label}}); err != nil {
                        log.Println("{{endpoint.operationId}}: decode {{param.name}} from body:", err)
                        jsonError(w, err, http.StatusBadRequest)
                        return
                    }
                {% endif %}
            {% endfor -%}
            {%- if endpoint | secured -%}
            ctx := context.WithValue(r.Context(), ctxKeyCredentials, credentials)
            {% else %}
            ctx := r.Context()
            {% endif %}

            {%- if 204 in endpoint.responses %} err
            {%- else %} res, err
            {%- endif %} := api.{{endpoint.operationId | label}}(ctx
            {%- for param in endpoint.get('parameters', []) -%}
            , param{{param.name | label}}
            {%- endfor -%})

            if err != nil {
                log.Println("{{endpoint.operationId}}: execute:", err)
                jsonError(w, err, http.StatusInternalServerError)
                return
            }

            {%- if 204 in endpoint.responses %}
            w.WriteHeader(http.StatusNoContent)
            {%- else %}
            w.Header().Set("Content-Type", "application/json")
            encoder := json.NewEncoder(w)
            encoder.SetIndent("", "  ")
            w.WriteHeader(http.StatusOK)
            _ = encoder.Encode(res)
            {%- endif %}

        })
        {%- endfor %}
    {%- endfor %}

    return router
}

type errMessage struct {
    Message string `json:"error"`
}

func (err *errMessage) Error() string {
    return err.Message
}

func jsonError(w http.ResponseWriter, err error, code int) {
    w.Header().Set("Content-Type", "application/json")
    encoder := json.NewEncoder(w)
    encoder.SetIndent("", "  ")
    w.WriteHeader(code)
    _ = encoder.Encode(&errMessage{Message: err.Error()})
}