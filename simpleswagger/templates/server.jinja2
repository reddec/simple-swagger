{{ header }}
{%- from 'macros.jinja2' import validate %}
package {{package}}

import (
	"context"
	"encoding/json"
	"log"
    "errors"
	"net/http"
	"net/url"
    api "{{ api_package }}"
    {%-  if has_security %}
        {%- if credential_type.import_path %}
            {{ credential_type.package }} "{{ credential_type.import_path }}"
        {%- endif %}
    {%- endif %}
	"github.com/julienschmidt/httprouter"
)

{%  if has_security %}
var ErrUnauthorized = errors.New("unauthorized request")

type Security interface {
    {% for  name, definition in swagger.securityDefinitions.items() %}
        AuthBy{{ name | label }}(value string) ({{ credential_type.fqdn }}, error)
    {% endfor %}
}

func Credentials(ctx context.Context) {{ credential_type.fqdn }} {
    return ctx.Value(ctxKeyCredentials).({{ credential_type.fqdn }})
}

const ctxKeyCredentials = "credentials"
{% endif %}


func Install(mux interface {
	Handle(pattern string, handler http.Handler)
}, impl api.API{% if has_security %}, auth Security{% endif %}) {
	mux.Handle(api.Prefix + "/", http.StripPrefix(api.Prefix, New(impl{% if has_security %}, auth{% endif %})))
}

func New(impl api.API{% if has_security %}, auth Security{% endif %}) http.Handler {
     router := httprouter.New()
     srv := &server{impl: impl{% if has_security %}, auth: auth{% endif %}}
     {%- for path, methods in swagger.paths.items() %}
        {%- for method, endpoint in methods.items() %}
        router.{{method | upper}}("{{path | path}}", srv.{{endpoint.operationId | label}})
        {%- endfor %}
    {%- endfor %}

    return router
}

type server struct {
    impl api.API
    {% if has_security %}auth Security{% endif %}
}

{%- for path, methods in swagger.paths.items() %}
    {%- for method, endpoint in methods.items() %}
func (srv *server) {{endpoint.operationId | label}}(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
        defer r.Body.Close()

        {% if endpoint | secured %}
            var (
                credentials {{ credential_type.fqdn }}
                authorized bool
            )
            {% for security in endpoint.security %}
                {%- if not loop.first %} else {% endif -%}
                {%- set sec_name = security.keys() | first -%}
                {%- set def = (sec_name | sec_def) -%}

                if cred, err := srv.auth.AuthBy{{ sec_name | label }}(
                {%- if  def["in"] == 'header' -%}
                    r.Header.Get("{{ def.name }}")
                {%- endif -%}
                ); err == nil {
                    credentials = cred
                    authorized = true
                }
            {% endfor %}

            if !authorized {
                log.Println("{{endpoint.operationId}}: authorization failed")
                jsonError(w, ErrUnauthorized.Error(), http.StatusUnauthorized)
                return
            }
        {% endif %}

        {% for param in endpoint.get('parameters', []) -%}
        var param{{param.name | label}} {{param | map_type(true)}} // in {{param.in}}
        {% endfor -%}

        {%- if (endpoint | has_query_params) %}
        var urlParams = r.URL.Query()
        {%- endif %}

        {% for param in endpoint.get('parameters', []) -%}
            {%- if param.in == 'path' %}
                if v, err := url.PathUnescape(ps.ByName("{{param.name}}")); err != nil{
                     log.Println("{{endpoint.operationId}}: decode {{param.name}} from path:", err)
                     jsonError(w, err.Error(), http.StatusBadRequest)
                     return
                }  else {
                    {%- if (param | map_type) == 'string'%}
                    param{{param.name | label}} = v
                    {%- else %}
                    if value, err := {{ param | from_string('v') }}; err == nil {
                        param{{param.name | label}} = {{ (param | map_type) }}(value)
                    } else {
                        log.Println("{{endpoint.operationId}}: decode {{param.name}} from path:", err)
                        jsonError(w, err.Error(), http.StatusBadRequest)
                        return
                    }
                    {%- endif  %}
                }
            {%- elif param.in == 'body' %}
                if err := json.NewDecoder(r.Body).Decode(&param{{param.name | label}}); err != nil {
                    log.Println("{{endpoint.operationId}}: decode {{param.name}} from body:", err)
                    jsonError(w, err.Error(), http.StatusBadRequest)
                    return
                }
            {%- elif param.in == 'header' %}
                param{{param.name | label}} = r.Header.Get("{{ param.name }}")
            {%- elif param.in == 'query' %}
                {%- if (param | map_type) == 'string'%}
                param{{param.name | label}} = urlParams.Get("{{ param.name }}")
                {%- else %}
                if value, err := {{ param | from_string('queryParam(urlParams, ' + (param.name | tojson) + ',' + (param.default | string | tojson) + ' )') }}; err == nil {
                    param{{param.name | label}} = {{ (param | map_type) }}(value)
                } else {
                    log.Println("{{endpoint.operationId}}: decode {{param.name}} from query:", err)
                    jsonError(w, err.Error(), http.StatusBadRequest)
                    return
                }
                {%- endif  %}
            {% endif %}
        {% endfor -%}


        if err := validate{{endpoint.operationId | label}}(
        {%- for param in endpoint.get('parameters', []) -%}
        {% if not loop.first %}, {% endif %}param{{param.name | label}}
        {%- endfor -%}); err != nil {
            log.Println("{{endpoint.operationId}}: validate:", err)
            jsonError(w, err.Error(), http.StatusUnprocessableEntity)
            return
        }


        {%- if endpoint | secured %}
        ctx := context.WithValue(r.Context(), ctxKeyCredentials, credentials)
        {% else %}
        ctx := r.Context()
        {% endif %}

        {%- if 204 in endpoint.responses %} err
        {%- else %} res, err
        {%- endif %} := srv.impl.{{endpoint.operationId | label}}(ctx
        {%- for param in endpoint.get('parameters', []) -%}
        , param{{param.name | label}}
        {%- endfor -%})

        if err != nil {
            log.Println("{{endpoint.operationId}}: execute:", err)
            autoError(w, err)
            return
        }

        {%- if 204 in endpoint.responses %}
        w.WriteHeader(http.StatusNoContent)
        {%- else %}
        w.Header().Set("Content-Type", "application/json")
        encoder := json.NewEncoder(w)
        encoder.SetIndent("", "  ")
        w.WriteHeader(http.StatusOK)
        _ = encoder.Encode(res)
        {%- endif %}
    }

    func validate{{endpoint.operationId | label}}({%- for param in endpoint.get('parameters', []) %}{% if not loop.first %}, {% endif %}param{{ param.name | label }} {{param | map_type(true)}}{% endfor %}) error {
         {%- for param in endpoint.get('parameters', []) %}
             {%- if param | is_ref_to_type  %}
             if err := param{{ param.name | label }}.Validate(); err != nil {
                 return fmt.Errorf("{{ param.name }}: %w", err)
             }
             {%- else %}
            {{ validate((param | resolve), "param" + (param.name | label), "api.") }}
             {%- endif %}
         {%- endfor %}
         return nil
    }
    {% endfor %}
{% endfor %}

var (
{%- for pattern, name in patterns_cache.items() %}
    {{ name }} = regexp.MustCompile({{ pattern | tojson }})
{%- endfor %}
)

func autoError(w http.ResponseWriter, err error) {
	if apiError, ok := api.AsAPIError(err); ok {
		jsonError(w, apiError.Message, apiError.Status)
        return
	}
	jsonError(w, err.Error(), http.StatusInternalServerError)
}

func jsonError(w http.ResponseWriter, err string, code int) {
    type errMessage struct {
        Message string `json:"error"`
    }

	w.Header().Set("Content-Type", "application/json")
	encoder := json.NewEncoder(w)
	encoder.SetIndent("", "  ")
	w.WriteHeader(code)
	_ = encoder.Encode(&errMessage{Message: err})
}

func queryParam(r url.Values, name string, defaultValue string) string {
	if r.Has(name) {
		return r.Get(name)
	}
	return defaultValue
}