{{ header }}
package {{package}}

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
    "bytes"
	"net/http"
    api "{{ api_package }}"
)

type RequestHook func(req *http.Request) error

func New(baseURL string, options ...Option) *Client {
	cl := &Client{
		baseURL: baseURL,
		client:  http.DefaultClient,
	}
	for _, opt := range options {
		opt(cl)
	}
	return cl
}

type Option func(cl *Client)

func HTTPClient(client *http.Client) Option {
	return func(cl *Client) {
		cl.client = client
	}
}

func Before(hook RequestHook) Option {
	return func(cl *Client) {
		cl.beforeHooks = append(cl.beforeHooks, hook)
	}
}

{%  if has_security %}
    {% for  name, definition in swagger.securityDefinitions.items() %}
        {%- set def = (name | sec_def) -%}
        func AuthBy{{ name | label }}(cred string) Option {
            return func(cl *Client) {
                cl.securityHooks = append(cl.securityHooks, func(req *http.Request) error {
                     {% if  def["in"] == 'header' -%}
                        req.Header.Set("{{ def.name }}", cred)
                    {% endif -%}
                    return nil
                })
            }
        }
    {% endfor %}
{% endif %}


type Client struct {
    baseURL      string
    client       *http.Client
    beforeHooks  []RequestHook
{%-  if has_security %}
    securityHooks []RequestHook
{%- endif %}
}

// Creates full copy of original client and applies new options.
func (client *Client) With(options ...Option) *Client {
	cp := &Client{
		baseURL:     client.baseURL,
		client:      client.client,
		beforeHooks: make([]RequestHook, len(client.beforeHooks)),
{%-  if has_security %}
        securityHooks : make([]RequestHook, len(client.securityHooks)),
{%- endif %}
	}
	copy(cp.beforeHooks, client.beforeHooks)
{%-  if has_security %}
    copy(cp.securityHooks, client.securityHooks)
{%- endif %}
	for _, opt := range options {
		opt(cp)
	}

	return cp
}

{%- for path, methods in swagger.paths.items() %}
    {%- for method, endpoint in methods.items() %}
        func (client *Client) {{endpoint.operationId | label}}(ctx context.Context {%- for param in endpoint.get('parameters', []) -%}
        , {{param.name | private}} {{param | map_type(true)}}
        {%- endfor -%}) ({%- if 200 in endpoint.responses %}out {{endpoint.responses.200.schema | map_type(true)}},{% endif %}err error) {
            	requestURL := client.baseURL + api.Prefix + "{{ path }}"
                var body bytes.Buffer
                {% for param in endpoint.get('parameters', []) %}
                    {%- if param.in == 'path' %}
                        requestURL = strings.ReplaceAll(requestURL, "{{ '{' + param.name +'}' }}", url.PathEscape({{ param | to_string(param.name | private) }}))
                    {%- elif param.in == 'body' %}
                        {% if not endpoint.get('consumes', []) or 'application/json' in endpoint.get('consumes', []) %}
                        if err = json.NewEncoder(&body).Encode({{ param.name | private }}); err != nil {
                            err = fmt.Errorf("encode {{ param.name }}: %w", err)
                            return
                        }
                        {% elif  'text/plain' in endpoint.get('consumes', []) and (param | map_type) == 'string' %}
                        _, _ = body.WriteString({{ param.name | private }})
                        {% endif %}
                    {% endif %}
                {%- endfor %}

                {% for param in (endpoint.get('parameters', []) | inside('query')) %}
                    requestURL += "{% if loop.first %}?{% else %}&{% endif %}{{ param.name }}=" + url.QueryEscape({{ param | to_string(param.name | private) }})
                {%- endfor %}

                req, err := http.NewRequestWithContext(ctx, http.Method{{ method | title }}, requestURL, &body)
                if err != nil {
                    err = fmt.Errorf("prepare request: %w", err)
                    return
                }

                {%- for param in endpoint.get('parameters', []) -%}
                    {%- if param.in == 'header' %}
                        req.Header.Set("{{ param.name }}", {{ param.name }})
                    {% endif %}
                {%- endfor %}

                {%- if endpoint | has_payload and (not endpoint.get('consumes', []) or 'application/json' in endpoint.get('consumes', [])) %}
                req.Header.Set("Content-Type", "application/json")
                {%- endif %}
                {% if endpoint | secured %}
                for _, hook := range client.securityHooks {
                    if err = hook(req); err != nil {
                        return
                    }
                }
                {% endif %}
                for _, hook := range client.beforeHooks {
                    if err = hook(req); err != nil {
                        return
                    }
                }

                res, err := client.client.Do(req)
                if err != nil {
                    err = fmt.Errorf("execute request: %w", err)
                    return
                }

                defer res.Body.Close()

                if res.StatusCode / 100 != 2 {
                    err = getError(res)
                    return
                }

                {%- if 200 in endpoint.responses %}
                if err = json.NewDecoder(res.Body).Decode(&out); err != nil {
                    err = fmt.Errorf("decode response: %w", err)
                    return
                }
                {% endif %}

                return
        }
    {% endfor %}
{%- endfor %}

func getError(res *http.Response) error {
	payload, err := ioutil.ReadAll(res.Body)
	if err != nil {
		return fmt.Errorf("read error: %w", err)
	}
	if res.Header.Get("Content-Type") != "application/json" {
		return errors.New(string(payload))
	}
	var msg api.Error
	err = json.Unmarshal(payload, &msg)
	if err != nil {
		// fallback
		return errors.New(string(payload))
	}
    msg.Status = res.StatusCode
	return &msg
}
